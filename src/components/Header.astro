---
import HeaderLink from './HeaderLink.astro';
import { SITE_TITLE } from '../consts';
---

<header>
	<h2>
		<a href="/">{SITE_TITLE}</a>
	</h2>
	<nav>
		<div class="internal-links">
			<HeaderLink href="/blog">Blog</HeaderLink>
			<HeaderLink href="/tils">TILs</HeaderLink>
		</div>

		<div class="controls">
			<!-- Search Icon -->
			<button id="search-icon" aria-label="検索を開く">
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<circle cx="11" cy="11" r="8"></circle>
					<line x1="21" y1="21" x2="16.65" y2="16.65"></line>
				</svg>
			</button>

			<!-- Social Links -->
			<div class="social-links">
				<a href="https://twitter.com/zucky_sub" target="_blank">
					<span class="sr-only">X (旧 Twitter)</span>
					<svg viewBox="0 0 24 24" aria-hidden="true" width="32" height="32">
						<path
							fill="currentColor"
							d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"
						></path>
					</svg>
				</a>
				<a href="https://github.com/zakizaki-ri9" target="_blank">
					<span class="sr-only">GitHub</span>
					<svg viewBox="0 0 16 16" aria-hidden="true" width="32" height="32">
						<path
							fill="currentColor"
							d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"
						></path>
					</svg>
				</a>
				<a href="https://kic-yuuki.hatenablog.com/" target="_blank">
					<span class="sr-only">Hatena Blog</span>
					<svg viewBox="0 0 16 16" aria-hidden="true" width="32" height="32">
						<path
							fill="currentColor"
							d="M4 1C2.35 1 1 2.35 1 4v8c0 1.65 1.35 3 3 3h8c1.65 0 3-1.35 3-3V4c0-1.65-1.35-3-3-3H4zm0 2h8c.55 0 1 .45 1 1v8c0 .55-.45 1-1 1H4c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1zm1.5 1C4.67 4 4 4.67 4 5.5v1C4 7.33 4.67 8 5.5 8h1v4.5h2V8h1c.83 0 1.5-.67 1.5-1.5v-1c0-.83-.67-1.5-1.5-1.5h-4zm0 1h4c.28 0 .5.22.5.5v1c0 .28-.22.5-.5.5h-4c-.28 0-.5-.22-.5-.5v-1c0-.28.22-.5.5-.5zm6.5 1v1.5h1V6h-1z"
						></path>
					</svg>
				</a>
			</div>
		</div>
	</nav>
</header>

<!-- Search Modal -->
<div id="search-modal-overlay" class="search-modal-overlay"></div>
<div id="search-modal" class="search-modal">
	<button id="search-modal-close" class="search-modal-close" aria-label="閉じる">
		<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
			<line x1="18" y1="6" x2="6" y2="18"></line>
			<line x1="6" y1="6" x2="18" y2="18"></line>
		</svg>
	</button>
	<div id="modal-search-container"></div>
</div>

<script is:inline>
	let pagefindInstance = null;
	const searchIcon = document.getElementById('search-icon');
	const modalOverlay = document.getElementById('search-modal-overlay');
	const modal = document.getElementById('search-modal');
	const modalClose = document.getElementById('search-modal-close');
	const modalSearchContainer = document.getElementById('modal-search-container');

	const openModal = () => {
		modalOverlay.style.display = 'block';
		modal.style.display = 'block';
		document.body.style.overflow = 'hidden'; // 背景スクロール禁止

		// 初回表示時にPageFind UIを初期化
		if (!pagefindInstance && window.PagefindUI) {
			try {
				pagefindInstance = new PagefindUI({
					element: "#modal-search-container",
					showSubResults: true,
					// autofocus が true だとモーダル表示時にフォーカスが当たり、
					// すぐに閉じる操作をした場合に意図せず入力が開始されることがあるため false に設定
					autofocus: false,
				});
				// 初期化後に検索入力欄にフォーカスを当てる
				 setTimeout(() => {
					const input = modalSearchContainer.querySelector('.pagefind-ui__search-input');
					if (input) {
						input.focus();
					}
				}, 100); // 少し遅延させてフォーカス
			} catch (e) {
				console.error("PagefindUI initialization failed:", e);
				modalSearchContainer.innerHTML = '<p>検索機能の読み込みに失敗しました。</p>';
			}
		} else if (pagefindInstance) {
				// 2回目以降は既存のインスタンスの入力欄にフォーカス
				 setTimeout(() => {
					const input = modalSearchContainer.querySelector('.pagefind-ui__search-input');
					if (input) {
						input.focus();
					}
				}, 100);
		} else if (!window.PagefindUI) {
			 modalSearchContainer.innerHTML = '<p>検索機能の読み込み中です...</p>';
			 // PagefindUI がロードされるのを待つ処理 (必要であれば)
			 // 例: 一定時間後にリトライするなど
		}
	};

	const closeModal = () => {
		modalOverlay.style.display = 'none';
		modal.style.display = 'none';
		document.body.style.overflow = ''; // 背景スクロール許可
		// モーダルを閉じるときに入力内容をクリアする (オプション)
		// if (pagefindInstance) {
		//   const input = modalSearchContainer.querySelector('.pagefind-ui__search-input');
		//   if (input) input.value = '';
		//   // 必要であれば検索結果もクリアする Pagefind UI のメソッドを探す
		// }
	};

	searchIcon.addEventListener('click', openModal);
	modalOverlay.addEventListener('click', closeModal);
	modalClose.addEventListener('click', closeModal);

	// ESCキーでモーダルを閉じる
	document.addEventListener('keydown', (event) => {
		if (event.key === 'Escape' && modal.style.display === 'block') {
			closeModal();
		}
	});
</script>

<style>
	header {
		margin: 0em 0 2em;
		padding: 0 1em;
		background: white;
		box-shadow: 0 2px 8px rgba(var(--black), 5%);
		position: sticky;
		top: 0;
		width: 100%;
		box-sizing: border-box;
		z-index: 1000; /* モーダルより手前に */
	}
	h2 {
		margin: 0.5em 0;
		font-size: 1em;
	}

	h2 a,
	h2 a.active {
		text-decoration: none;
	}
	nav {
		display: flex;
		align-items: center;
		justify-content: space-between;
	}

	.internal-links {
		display: flex;
		gap: 1em; /* リンク間のスペース */
	}
	.controls {
		display: flex;
		align-items: center;
		gap: 1em; /* アイコンとソーシャルリンクの間 */
	}
	#search-icon {
		background: none;
		border: none;
		cursor: pointer;
		padding: 0.5em; /* クリック領域を確保 */
		display: flex;
		align-items: center;
		justify-content: center;
		color: var(--black);
	}
	#search-icon:hover {
		color: var(--accent);
	}

	nav a {
		padding: 1em 0.5em;
		color: var(--black);
		border-bottom: 4px solid transparent;
		text-decoration: none;
	}
	nav a.active {
		text-decoration: none;
		border-bottom-color: var(--accent);
	}
	.social-links,
	.social-links a {
		display: flex;
	}
	@media (max-width: 720px) {
		.social-links {
			display: none;
		}
	}

	/* Search Modal Styles */
	.search-modal-overlay {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.5);
		z-index: 1010; /* ヘッダーより手前、モーダルより奥 */
	}
	.search-modal {
		display: none;
		position: fixed;
		top: 15%; /* 上からの位置を調整 */
		left: 50%;
		transform: translateX(-50%);
		width: 90%;
		max-width: 600px; /* 最大幅 */
		max-height: 70%; /* 最大高さ */
		background-color: white;
		padding: 2em;
		border-radius: 8px;
		box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
		z-index: 1020; /* 最前面 */
		overflow-y: auto; /* 結果が多い場合にスクロール */
	}
	.search-modal-close {
		position: absolute;
		top: 1em;
		right: 1em;
		background: none;
		border: none;
		cursor: pointer;
		padding: 0.5em;
		color: #888;
	}
	.search-modal-close:hover {
		 color: var(--black);
	}

	/* PageFind UI in Modal */
	#modal-search-container .pagefind-ui__search-input {
		 font-size: 1.1em; /* 入力欄の文字サイズ調整 */
		 padding: 0.8em;
		 margin-bottom: 1em;
	}
	#modal-search-container .pagefind-ui__result {
		 margin-bottom: 1em; /* 検索結果間のスペース */
	}

</style>
