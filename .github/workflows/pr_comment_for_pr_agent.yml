name: PR Comment for PR-Agent

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  pr_comment_for_pr_agent:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm init -y
          npm install jsonwebtoken

      - name: Generate JWT
        id: generate_jwt
        uses: actions/github-script@v6
        with:
          script: |
            const jwt = require('jsonwebtoken');

            const now = Math.floor(Date.now() / 1000);
            const payload = {
              iat: now,
              exp: now + (10 * 60),
              iss: process.env.APP_ID
            };

            try {
              const privateKey = process.env.APP_PRIVATE_KEY;
              
              // デバッグログの追加
              console.log('JWT Payload:', JSON.stringify(payload));
              console.log('Private key validation:');
              console.log('- Starts with correct header:', privateKey.startsWith('-----BEGIN RSA PRIVATE KEY-----'));
              console.log('- Ends with correct footer:', privateKey.endsWith('-----END RSA PRIVATE KEY-----'));
              console.log('- Contains newlines:', privateKey.includes('\n'));
              console.log('- Total length:', privateKey.length);
              
              const token = jwt.sign(payload, privateKey, { 
                algorithm: 'RS256',
                header: {
                  alg: 'RS256',
                  typ: 'JWT'
                }
              });
              
              console.log('Generated JWT token length:', token.length);
              core.setOutput('token', token);
            } catch (error) {
              console.log('Error details:', error);
              core.setFailed(`JWT generation failed: ${error.message}`);
              throw error;
            }
        env:
          APP_ID: ${{ secrets.PR_COMMENT_FOR_PR_AGENT_APP_ID }}
          APP_PRIVATE_KEY: ${{ secrets.PR_COMMENT_FOR_PR_AGENT_APP_PRIVATE_KEY }}

      - name: Get Installation Token
        id: get_installation_token
        uses: actions/github-script@v6
        with:
          script: |
            const jwt = process.env.JWT;
            try {
              console.log('Using JWT token length:', jwt.length);
              console.log('Authorization header:', `Bearer ${jwt.substring(0, 10)}...`);

              const result = await github.request('POST /app/installations/${{ secrets.PR_COMMENT_FOR_PR_AGENT_INSTALLATION_ID }}/access_tokens', {
                headers: {
                  'authorization': `Bearer ${jwt}`,
                  'accept': 'application/vnd.github.v3+json'
                }
              });
              console.log('Installation token obtained successfully');
              core.setOutput('token', result.data.token);
            } catch (error) {
              console.log('Full error:', error);
              core.setFailed(`Failed to get installation token: ${error.message}`);
              throw error;
            }
        env:
          JWT: ${{ steps.generate_jwt.outputs.token }}

      - name: Find and Delete Comments
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.get_installation_token.outputs.token }}
          script: |
            const issue_number = ${{ github.event.pull_request.number }};
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
            });

            const commentsToDelete = comments.data.filter(comment =>
              ['/review', '/describe', '/improve'].includes(comment.body)
            );

            for (const comment of commentsToDelete) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
              });
            }

      - name: Post Comments
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.get_installation_token.outputs.token }}
          script: |
            const issue_number = ${{ github.event.pull_request.number }};
            const commentsToPost = ['/review', '/describe', '/improve'];

            for (const comment of commentsToPost) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                body: comment,
              });
            }
